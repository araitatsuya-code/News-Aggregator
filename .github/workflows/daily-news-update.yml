name: Daily News Update

on:
  # 毎日午前9時（JST）に実行 = UTC 0時
  schedule:
    - cron: '0 0 * * *'
  
  # 手動実行も可能
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if recent data exists'
        required: false
        default: 'false'
        type: boolean

env:
  CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
  PYTHON_VERSION: '3.13'

jobs:
  update-news:
    runs-on: ubuntu-latest
    timeout-minutes: 90   # 1.5時間でタイムアウト（課金対策）
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Verify Claude API key
        run: |
          if [ -z "$CLAUDE_API_KEY" ]; then
            echo "❌ CLAUDE_API_KEY is not set in GitHub Secrets"
            echo "Please add your Claude API key to repository secrets:"
            echo "1. Go to Settings > Secrets and variables > Actions"
            echo "2. Click 'New repository secret'"
            echo "3. Name: CLAUDE_API_KEY"
            echo "4. Value: your_claude_api_key_here"
            exit 1
          fi
          echo "✅ Claude API key is configured"
          
      - name: Check for recent data
        id: check-data
        run: |
          TODAY=$(date +%Y-%m-%d)
          DATA_FILE="frontend/public/data/news/$TODAY/articles.json"
          
          if [ "${{ github.event.inputs.force_update }}" = "true" ]; then
            echo "🔄 Force update requested"
            echo "should_update=true" >> $GITHUB_OUTPUT
          elif [ -f "$DATA_FILE" ]; then
            ARTICLES_COUNT=$(jq '. | length' "$DATA_FILE")
            if [ "$ARTICLES_COUNT" -gt 50 ]; then
              echo "✅ Recent data exists ($ARTICLES_COUNT articles), skipping update"
              echo "should_update=false" >> $GITHUB_OUTPUT
            else
              echo "⚠️  Data exists but insufficient ($ARTICLES_COUNT articles), updating"
              echo "should_update=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "📰 No data for today, starting news collection"
            echo "should_update=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Create data directories
        if: steps.check-data.outputs.should_update == 'true'
        run: |
          mkdir -p frontend/public/data/{news,summaries,config,metrics}
          mkdir -p logs
          echo "📁 Data directories created"
          
      - name: Collect news data
        if: steps.check-data.outputs.should_update == 'true'
        run: |
          echo "🚀 Starting news collection..."
          timeout 5400 python scripts/main.py || {
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "⏰ News collection timed out after 1.5 hours"
              exit 1
            else
              echo "❌ News collection failed with exit code $exit_code"
              exit $exit_code
            fi
          }
          echo "✅ News collection completed"
          
      - name: Verify collected data
        if: steps.check-data.outputs.should_update == 'true'
        run: |
          TODAY=$(date +%Y-%m-%d)
          ARTICLES_FILE="frontend/public/data/news/$TODAY/articles.json"
          LATEST_FILE="frontend/public/data/news/latest.json"
          
          if [ ! -f "$ARTICLES_FILE" ]; then
            echo "❌ Articles file not found: $ARTICLES_FILE"
            exit 1
          fi
          
          ARTICLES_COUNT=$(jq '. | length' "$ARTICLES_FILE" 2>/dev/null || echo "0")
          
          if [ "$ARTICLES_COUNT" -lt 30 ]; then
            echo "⚠️  Warning: Only $ARTICLES_COUNT articles collected"
          else
            echo "✅ Successfully collected $ARTICLES_COUNT articles"
          fi
          
          # latest.json更新
          cp "$ARTICLES_FILE" "$LATEST_FILE"
          echo "📄 Updated latest.json with $ARTICLES_COUNT articles"
          
      - name: Generate sitemap and feeds
        if: steps.check-data.outputs.should_update == 'true'
        run: |
          cd frontend
          npm ci
          npm run generate-sitemap
          echo "🗺️  Sitemap and RSS feeds generated"
          
      - name: Commit and push changes
        if: steps.check-data.outputs.should_update == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          TODAY=$(date +%Y-%m-%d)
          ARTICLES_COUNT=$(jq '. | length' "frontend/public/data/news/$TODAY/articles.json" 2>/dev/null || echo "0")
          
          # 変更があるファイルのみ追加
          git add frontend/public/data/
          git add frontend/public/sitemap.xml
          git add frontend/public/rss*.xml
          git add frontend/public/robots.txt
          
          # 変更があるかチェック
          if git diff --cached --quiet; then
            echo "📝 No changes to commit"
          else
            # コミット
            git commit -m "feat: 自動ニュース更新 ($TODAY) - $ARTICLES_COUNT 記事

📊 収集統計:
- 日付: $TODAY  
- 記事数: $ARTICLES_COUNT
- 実行時刻: $(date '+%Y-%m-%d %H:%M:%S UTC')

🤖 Automated update via GitHub Actions"

            # プッシュ
            git push
            echo "✅ Changes committed and pushed successfully"
          fi
          
      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ steps.check-data.outputs.should_update }}" = "false" ]; then
            echo "ℹ️  News update skipped - recent data available"
          elif [ "${{ job.status }}" = "success" ]; then
            echo "✅ Daily news update completed successfully"
          else
            echo "❌ Daily news update failed"
          fi
          
      - name: Upload logs
        if: always() && steps.check-data.outputs.should_update == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: news-update-logs
          path: |
            logs/
            frontend/public/data/metrics/
          retention-days: 7
          
  # Vercelデプロイトリガー（変更があった場合のみ）
  trigger-deployment:
    needs: update-news
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Trigger Vercel deployment
        run: |
          echo "🚀 News update completed - Vercel will automatically deploy the changes"
          echo "📡 Deployment status: https://vercel.com/dashboard"